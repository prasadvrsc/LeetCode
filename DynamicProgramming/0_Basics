Dynamic Programming is an algorithm technique for solving an optimization problem 
by breaking it down into simpler subproblems and utilizing the fact that the 
optimal solution to the over all problem depends upon the optimal solution to its subproblems

Characterestics of DP:

1. Overlapping subproblems (Example: Fibonacci Series)
2. Optional Substructure property

DP Methods:
1. Top down with Memoization: 
    In this approach, we try to solve the bigger problem by recursively finding the solution to smaller sub-problems. 
    Whenever we solve a sub-problem, we cache its result so that we don’t end up solving it repeatedly if it’s called multiple times. 
    Instead, we can just return the saved result. This technique of storing the results of already solved subproblems is called Memoization.
2. Bottom-up with Tabulation:
    Tabulation is the opposite of the top-down approach and avoids recursion. 
    In this approach, we solve the problem “bottom-up” (i.e. by solving all the related sub-problems first). 
    This is typically done by filling up an n-dimensional table. 
    Based on the results in the table, the solution to the top/original problem is then computed.
